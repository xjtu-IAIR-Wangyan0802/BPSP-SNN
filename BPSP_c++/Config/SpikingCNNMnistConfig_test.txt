#Comment#
#NON_LINEARITY = NL_SIGMOID , NL_TANH , NL_RELU#
IS_GRADIENT_CHECKING = true;   #is true when debug#
BOOST_METHOD = true;            #allow boost weight train#
EFFECT_RATIO = true;            #use e^k_{i|j}/o^{k-1}_j for estimate the grad of syn effect#
                                #need to set batch = 1 in this case#
OPTIMIZER = adam;               # use adam as the optimizer , by default is sgd with momentum #

SHOWIMAGE = false;              #show the images after transformation#
TEST_EPOCH = 1;                 #the period to get the test dataset's error rate#
WHITE_NOISE = 0.0;  
LAMBDA_REG  = 10;               # param for weight regularization #
BETA_REG    = 0.4;               

WEIGHT_LIMIT= 8.0;


BATCH_SIZE = 1;                
CHANNELS = 1;                   #1, 3, 4#
END_TIME = 450;                 #The spike train duration#

TRAIN_SAMPLES = 1;              # number of train/test samples per class, -1 means read all#
TEST_SAMPLES = 1;
TRAIN_DATA_PATH = test/cnn_mnist/input_spikes_0_5.dat;  # train and test path  #
TEST_DATA_PATH =  test/cnn_mnist/input_spikes_0_5.dat;    


[
LAYER = DATASPIKING;
NAME  = data;
NUM_NEURONS = 784;
]

[
LAYER = CONVSPIKING;
NAME  = conv1;
INPUT = data;
KERNEL_SIZE = 5;
PADDING = 0;
KERNEL_AMOUNT = 5;
VTH = 5;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
initType = External;
weightPath = test/golden/cnn_mnist/weights/conv1_info.txt;
refOutputTrainPath = test/golden/cnn_mnist/spikes/conv1/train/conv1_1.dat;
refOutputTestPath = test/golden/cnn_mnist/spikes/conv1/test/conv1_1.dat;
refWeightPath = test/golden/cnn_mnist/weights/conv1_info_trained.txt;
]

[
LAYER = POOLINGSPIKING;
NAME  = pooling1;
INPUT = conv1;
SIZE = 2;
SKIP = 2;
VTH = 2;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
refOutputTrainPath = test/golden/cnn_mnist/spikes/pool1/train/pool1_1.dat;
refOutputTestPath = test/golden/cnn_mnist/spikes/pool1/test/pool1_1.dat;
]

[
LAYER = CONVSPIKING;
NAME  = conv2;
INPUT = pooling1;
KERNEL_SIZE = 5;
PADDING = 0;
KERNEL_AMOUNT = 3;
VTH = 5;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
initType = External;
weightPath = test/golden/cnn_mnist/weights/conv2_info.txt;
refOutputTrainPath = test/golden/cnn_mnist/spikes/conv2/train/conv2_1.dat;
refOutputTestPath = test/golden/cnn_mnist/spikes/conv2/test/conv2_1.dat;
refWeightPath = test/golden/cnn_mnist/weights/conv2_info_trained.txt;
]

[
LAYER = POOLINGSPIKING;
NAME  = pooling2;
INPUT = conv2;
SIZE = 2;
SKIP = 2;
VTH = 2;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
refOutputTrainPath = test/golden/cnn_mnist/spikes/pool2/train/pool2_1.dat;
refOutputTrainPath = test/golden/cnn_mnist/spikes/pool2/test/pool2_1.dat;
]


[
LAYER = SPIKING;
NAME  = hidden;
NUM_NEURONS = 100;
INPUT = pooling2;
VTH = 10;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
initType = External;
weightPath = test/golden/cnn_mnist/weights/hidden_info.txt;
refOutputTrainPath = test/golden/cnn_mnist/spikes/hidden/train/hidden.dat;
refOutputTestPath = test/golden/cnn_mnist/spikes/hidden/test/hidden.dat;
refWeightPath = test/golden/cnn_mnist/weights/hidden_info_trained.txt;
]

[
LAYER = SPIKING;
NUM_CLASSES = 10;
NAME  = output;
NUM_NEURONS = 10;
INPUT = hidden;
VTH = 5;
T_REFRAC = 2;
TAU_M = 64;
TAU_S = 8;
initType = External;
weightPath = test/golden/cnn_mnist/weights/output_info.txt;
laterialType = LOCAL_INHIBITION;
localInbStrength = 1;
DESIRED_LEVEL = 35;
UNDESIRED_LEVEL = 5;
MARGIN = 5;
refOutputTrainPath = test/golden/cnn_mnist/spikes/output/train/output.dat;
refOutputTestPath = test/golden/cnn_mnist/spikes/output/test/output.dat;
refWeightPath = test/golden/cnn_mnist/weights/output_info_trained.txt;
]
